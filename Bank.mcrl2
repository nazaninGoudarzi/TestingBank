sort mapping;
cons empty : mapping;
	 add : Int#Int#mapping -> mapping;
map
	arrayHead : mapping -> Int;
	size : mapping -> Nat;
	retValue : Int#mapping -> Int;
	delete : Int#mapping -> mapping;
	search : Int#mapping -> Bool;
var
	array : mapping;
	a,b,c : Int;
eqn
	arrayHead(add(a,b,array)) = a;
	size(empty) = 0;
	size(add(a,b,array)) = succ(size(array));
	retValue(a,add(c,b,array)) = if(c == a,b,0);
	delete(a,add(a,b,array)) = add(a,0,array);
	search(a,empty) = false;
	search(a,add(c,b,array)) = if(a == c,true,false);
%-------------------------------------------------
act
	call_addToBalance,get_addToBalance,set : Int#Int;
	call_userBalance,get_userBalance,balance,call_withdrawBalance,get_withdrawBalance,withd : Int;
	call_returnWithdraw,get_returnWithdraw,retWithdraw,get_returnBalance,call_returnBalance,retBalance : Int;
	setNewCustomer,setOldCustomer,update_user : mapping;
	success,fail;

proc 
	user(address:Int,value:Int) = (call_addToBalance(address,value) + 
		call_userBalance(address).(sum returnValue:Int.get_returnBalance(returnValue)) + 
		call_withdrawBalance(address).(sum returnValue:Int.get_returnWithdraw(returnValue)))
	.user(address,value);
	
	Bank(userBalances:mapping) = 
		(sum address:Int.get_userBalance(address).call_returnBalance(retValue(address,userBalances)) +
		(sum address:Int.sum value:Int.get_addToBalance(address,value).
			(!search(address,userBalances) -> setNewCustomer(add(address,value,userBalances)) <>
			setOldCustomer(add(address,(retValue(address,userBalances)) + value,userBalances)))) +
		sum address:Int.get_withdrawBalance(address).call_returnWithdraw(retValue(address,userBalances)).
			(success.update_user(delete(address,userBalances))) + fail)
		.Bank(userBalances);
init
	%hide({lastGet,lastSet,lastWithdraw},
		allow({balance,set,withd,retBalance,retWithdraw},
			comm({call_userBalance|get_userBalance -> balance,call_returnBalance|get_returnBalance -> retBalance,
			call_addToBalance|get_addToBalance -> set,
			call_withdrawBalance|get_withdrawBalance -> withd,call_returnWithdraw|get_returnWithdraw -> retWithdraw},
				 user(25,100) || user(44,200) || Bank(add(4,150,empty))));
